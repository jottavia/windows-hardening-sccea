<#
.SYNOPSIS
    Collects extensive system, security, and event data for compliance verification and auditing.
.DESCRIPTION
    This script is designed to be run periodically after a system has been hardened. It gathers detailed
    information about the system's configuration and security state, saving it into a set of JSON files.
    This allows for ongoing monitoring and provides evidence for compliance audits without making any
    changes to the system. It requires administrative privileges to gather all necessary data.
.NOTES
    Version: 2.0 (Enhanced Compliance Data)
#>
[CmdletBinding()]
param()

# --- Initial Setup and Admin Check ---
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Warning "Administrator privileges are required."
    Write-Host "Attempting to re-launch this script with Admin rights..."
    Start-Process powershell.exe -Verb RunAs -ArgumentList ('-NoProfile -ExecutionPolicy Bypass -File "{0}"' -f $MyInvocation.MyCommand.Path)
    exit
}

# --- Configuration ---
$config = @{
    LogRootFolderName = "PC-$env:COMPUTERNAME-AUDITS"
    LogFileName       = "collection-log.txt"
}

#===========================================================================
# HELPER FUNCTIONS
#===========================================================================
function Get-LogFolder {
    $rootLogFolder = Join-Path (Split-Path -Qualifier $PSScriptRoot) $config.LogRootFolderName
    if (-not(Test-Path $rootLogFolder)) { New-Item -ItemType Directory -Path $rootLogFolder | Out-Null }
    
    $timestampFolder = "AUDIT-$(Get-Date -Format 'yyyy-MM-dd_HH-mm-ss')"
    $finalPath = Join-Path $rootLogFolder $timestampFolder
    if (-not(Test-Path $finalPath)) { New-Item -ItemType Directory -Path $finalPath | Out-Null }
    
    return $finalPath
}

$script:logFolderPath = Get-LogFolder

function Write-CollectionLog {
    param([string]$Text)
    $logFile = Join-Path $script:logFolderPath $config.LogFileName
    "$(Get-Date -f 'yyyy-MM-dd HH:mm:ss') :: $Text" | Add-Content -Path $logFile
}

#===========================================================================
# DATA COLLECTION FUNCTIONS
#===========================================================================
function Export-SystemBaseline { Write-Host "  - Collecting system baseline data..."; $baselineFile = Join-Path $script:logFolderPath "system-baseline.json"; @{Timestamp=(Get-Date -f 'o');Computer=$env:COMPUTERNAME;OSInfo=@{Version=(Get-CimInstance Win32_OperatingSystem).Caption;Build=(Get-CimInstance Win32_OperatingSystem).BuildNumber;Architecture=(Get-CimInstance Win32_OperatingSystem).OSArchitecture;InstallDate=(Get-CimInstance Win32_OperatingSystem).InstallDate};Hardware=@{Manufacturer=(Get-CimInstance Win32_ComputerSystem).Manufacturer;Model=(Get-CimInstance Win32_ComputerSystem).Model;TotalMemory=[math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory/1GB,2);Processor=(Get-CimInstance Win32_Processor).Name};NetworkConfig=@{Adapters=Get-NetAdapter|Where-Object Status -eq 'Up'|select Name,InterfaceDescription,LinkSpeed;IPConfig=Get-NetIPConfiguration|Where-Object NetProfile.Name -ne 'Unidentified network'|select InterfaceAlias,IPv4Address,IPv4DefaultGateway;DNSServers=(Get-DnsClientServerAddress|Where-Object AddressFamily -eq 2).ServerAddresses};SecuritySettings=@{DefenderStatus=Get-MpComputerStatus|select AntivirusEnabled,AntispywareEnabled,RealTimeProtectionEnabled,IoavProtectionEnabled,OnAccessProtectionEnabled,BehaviorMonitorEnabled;DefenderPreferences=Get-MpPreference|select EnableTamperProtection,EnableControlledFolderAccess,EnableNetworkProtection;BitLockerVolumes=Get-BitLockerVolume|select MountPoint,VolumeStatus,ProtectionStatus,EncryptionMethod;FirewallProfiles=Get-NetFirewallProfile|select Name,Enabled,DefaultInboundAction,DefaultOutboundAction;WindowsUpdate=@{LastInstallTime=(Get-HotFix|Sort-Object InstalledOn -Descending|select -First 1).InstalledOn;PendingReboot=Test-Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired"}};UserAccounts=@{LocalUsers=Get-LocalUser|select Name,Enabled,LastLogon,PasswordExpires,PasswordRequired;LocalAdmins=Get-LocalGroupMember -Group 'Administrators'|select Name,ObjectClass,PrincipalSource;CurrentUser=$env:USERNAME};Services=Get-Service|Where-Object Status -eq 'Running'|Where-Object StartType -ne 'Disabled'|select Name,Status,StartType,ServiceType;InstalledSoftware=Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"|select DisplayName,DisplayVersion,Publisher,InstallDate|Where-Object DisplayName -ne $null|Sort-Object DisplayName}} | ConvertTo-Json -Depth 6 | Out-File -FilePath $baselineFile -Encoding UTF8; Write-CollectionLog "System baseline collected: $baselineFile" }
function Export-ComplianceVerification { Write-Host "  - Collecting compliance verification data..."; $complianceFile = Join-Path $script:logFolderPath "compliance-verification.json"; @{Timestamp=(Get-Date -f 'o');Computer=$env:COMPUTERNAME;AccessControl=@{UniqueUserIDs=(Get-LocalUser).Count;AdminAccounts=(Get-LocalGroupMember -Group 'Administrators').Count;DisabledAccounts=(Get-LocalUser|Where-Object Enabled -eq $false).Count;AccountLockoutPolicy=@{LockoutThreshold=(Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\RemoteAccess\Policy" -Name "LockoutThreshold" -ErrorAction SilentlyContinue).LockoutThreshold};PasswordPolicy=@{MinPasswordLength=(Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\RemoteAccess\Policy" -Name "MinPasswordLen" -ErrorAction SilentlyContinue).MinPasswordLen;MaxPasswordAge=(Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Services\RemoteAccess\Policy" -Name "MaxPasswordAge" -ErrorAction SilentlyContinue).MaxPasswordAge}};AuditAccountability=@{SecurityAuditing=@{LogonEvents=(Get-WinEvent -FilterHashtable @{LogName='Security';ID=4624} -MaxEvents 1 -ErrorAction SilentlyContinue)-ne $null;LogoffEvents=(Get-WinEvent -FilterHashtable @{LogName='Security';ID=4634} -MaxEvents 1 -ErrorAction SilentlyContinue)-ne $null;AccountLockouts=(Get-WinEvent -FilterHashtable @{LogName='Security';ID=4740} -MaxEvents 1 -ErrorAction SilentlyContinue)-ne $null;PrivilegeUse=(Get-WinEvent -FilterHashtable @{LogName='Security';ID=4672} -MaxEvents 1 -ErrorAction SilentlyContinue)-ne $null};LogSettings=@{SecurityLogSize=(Get-WinEvent -ListLog Security).MaximumSizeInBytes;SecurityLogRetention=(Get-WinEvent -ListLog Security).LogMode;SystemLogSize=(Get-WinEvent -ListLog System).MaximumSizeInBytes;ApplicationLogSize=(Get-WinEvent -ListLog Application).MaximumSizeInBytes};MonitoringTools=@{WazuhAgent=(Get-Service -Name 'WazuhSvc' -ErrorAction SilentlyContinue)-ne $null;SysmonService=(Get-Service -Name 'Sysmon*' -ErrorAction SilentlyContinue)-ne $null}};ConfigurationManagement=@{WindowsUpdateConfig=@{AutoUpdateEnabled=(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update" -Name "AUOptions" -ErrorAction SilentlyContinue).AUOptions;LastUpdateCheck=(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\Results\Detect" -Name "LastSuccessTime" -ErrorAction SilentlyContinue).LastSuccessTime};ServicesConfig=@{UnnecessaryServices=Get-Service|Where-Object {$_.StartType -eq 'Automatic' -and $_.Status -eq 'Stopped'}|measure-Object|select -ExpandProperty Count;RunningServices=(Get-Service|Where-Object Status -eq 'Running').Count};RegistryBaseline=@{DefenderTamperProtection=Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows Defender\Features" -Name "TamperProtection" -ErrorAction SilentlyContinue;UACEnabled=(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -ErrorAction SilentlyContinue).EnableLUA};ChangeTracking=@{LastConfigChange=try{(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\Results\Install" -Name "LastSuccessTime" -ErrorAction Stop).LastSuccessTime}catch{"No update history found"};SystemModificationDate=(Get-Item "C:\Windows\System32" -ErrorAction SilentlyContinue).LastWriteTime;RegistryLastModified=try{(Get-Item "HKLM:\SOFTWARE\Policies" -ErrorAction Stop).LastWriteTime.ToString('yyyy-MM-dd HH:mm:ss')}catch{"Registry key not accessible"};RecentlyInstalledSoftware=Get-ItemProperty "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"|Where-Object {$_.InstallDate -gt (Get-Date).AddDays(-30).ToString("yyyyMMdd")}|select DisplayName,InstallDate,Publisher;SystemBootTime=(Get-CimInstance Win32_OperatingSystem).LastBootUpTime;ConfigurationBaseline=@{LastHardeningRun=Get-Date -f 'o';ScriptVersion="v2-fixed";BaselineHash="Generated during collection process"}}};SystemCommunications=@{Encryption=@{BitLockerStatus=Get-BitLockerVolume|select MountPoint,VolumeStatus,ProtectionStatus;TLSSettings=@{TLS12Enabled=(Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client" -Name "Enabled" -ErrorAction SilentlyContinue).Enabled;SSL3Disabled=(Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\SSL 3.0\Client" -Name "Enabled" -ErrorAction SilentlyContinue).Enabled -eq 0}};NetworkSecurity=@{FirewallEnabled=(Get-NetFirewallProfile|Where-Object Enabled -eq $true).Count;OutboundBlocked=(Get-NetFirewallProfile|Where-Object DefaultOutboundAction -eq 'Block').Count;InboundRules=(Get-NetFirewallRule|Where-Object {$_.Direction -eq 'Inbound' -and $_.Enabled -eq $true}).Count;OutboundRules=(Get-NetFirewallRule|Where-Object {$_.Direction -eq 'Outbound' -and $_.Enabled -eq $true}).Count};RemoteAccess=@{WinRMListeners=(Get-WSManInstance -ResourceURI winrm/config/listener -Enumerate -ErrorAction SilentlyContinue|measure-Object).Count;WinRMService=(Get-Service -Name 'WinRM' -ErrorAction SilentlyContinue).Status;WinRMStartupType=(Get-Service -Name 'WinRM' -ErrorAction SilentlyContinue).StartType;RDPEnabled=(Get-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -ErrorAction SilentlyContinue).fDenyTSConnections;RDPService=(Get-Service -Name 'TermService' -ErrorAction SilentlyContinue).Status;RDPFirewallRule=(Get-NetFirewallRule -DisplayName "*Remote Desktop*"|Where-Object Enabled -eq $true|measure-Object).Count}};SystemIntegrity=@{MalwareProtection=@{AntivirusEnabled=(Get-MpComputerStatus).AntivirusEnabled;RealTimeProtection=(Get-MpComputerStatus).RealTimeProtectionEnabled;DefinitionsUpToDate=(Get-MpComputerStatus).AntivirusSignatureAge -lt 7;QuarantineItems=(Get-MpThreatDetection|measure-Object).Count};ASRRules=@{EnabledRules=(Get-MpPreference).AttackSurfaceReductionRules_Ids.Count;BlockMode=(Get-MpPreference).AttackSurfaceReductionRules_Actions -contains 1};ApplicationControl=@{SmartAppControl=Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\CI\Policy" -ErrorAction SilentlyContinue;WDACPolicy=Test-Path "$env:SystemRoot\System32\CodeIntegrity\SIPolicy.p7b"}};BackupVerification=@{URBackupClientStatus=(Get-Service -Name 'urbackupclientbackend' -ErrorAction SilentlyContinue).Status;URBackupClientStartType=(Get-Service -Name 'urbackupclientbackend' -ErrorAction SilentlyContinue).StartType;LastBackupDate=try{Get-ItemProperty "HKLM:\SOFTWARE\UrBackup\UrBackupClient" -Name "last_backup" -ErrorAction Stop}catch{"Registry key not found"};BackupTestResults=Test-Path "C:\BackupRestoreTest.flag";SystemRestorePoints=(Get-ComputerRestorePoint -ErrorAction SilentlyContinue|measure-Object).Count;URBackupProcessRunning=(Get-Process -Name 'urbackupclientbackend' -ErrorAction SilentlyContinue)-ne $null;BackupDiskSpace=try{Get-WmiObject -Class Win32_LogicalDisk|Where-Object DeviceID -eq "C:"|select @{Name="FreeSpaceGB";Expression={[math]::Round($_.FreeSpace/1GB,2)}}}catch{"Unable to retrieve disk space"}};ThirdPartyServices=@{InstalledThirdPartyServices=Get-Service|Where-Object {$_.ServiceName -notmatch '^(Microsoft|Windows|WinDefend|WSearch|Themes|BITS|EventLog|RpcSs|Dhcp|Dnscache|LanmanServer|LanmanWorkstation|Schedule|Spooler|AudioSrv|UxSms|ShellHWDetection|SamSs|PlugPlay|PolicyAgent|CryptSvc|TrustedInstaller|MpsSvc).*'}|select Name,Status,StartType,ServiceType;WizerTrainingStatus=@{Note="Manual verification required";CheckList="Training completion records in Security Binder";AnnualReview="DPA and SOC 2 compliance verification needed"};ExternalConnections=Get-NetTCPConnection|Where-Object {$_.RemoteAddress -notmatch '^(127\.0\.0\.1|::1|0\.0\.0\.0|169\.254\.)' -and $_.State -eq 'Established'}|select LocalAddress,LocalPort,RemoteAddress,RemotePort,OwningProcess;NetworkShares=Get-SmbShare|Where-Object Name -ne "IPC$"|select Name,Path,ShareState,ShareType;ScheduledTasks=Get-ScheduledTask|Where-Object {$_.TaskName -notmatch '^Microsoft' -and $_.State -eq 'Ready'}|select TaskName,TaskPath,State}} | ConvertTo-Json -Depth 8 | Out-File -FilePath $complianceFile -Encoding UTF8; Write-CollectionLog "Compliance verification data collected: $complianceFile" }
function Export-SecurityEventData { Write-Host "  - Collecting security event data..."; $eventsFile = Join-Path $script:logFolderPath "security-events.json"; @{Timestamp=(Get-Date -f 'o');Computer=$env:COMPUTERNAME;SecurityEvents=@{LogonEvents=Get-WinEvent -FilterHashtable @{LogName='Security';ID=4624,4625} -MaxEvents 100 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}};PrivilegeEvents=Get-WinEvent -FilterHashtable @{LogName='Security';ID=4672,4673,4674} -MaxEvents 50 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}};AccountEvents=Get-WinEvent -FilterHashtable @{LogName='Security';ID=4720,4722,4724,4726,4738,4740,4767} -MaxEvents 50 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}};PolicyEvents=Get-WinEvent -FilterHashtable @{LogName='Security';ID=4719,4817,4902,4906} -MaxEvents 20 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}}};SystemEvents=@{CriticalErrors=Get-WinEvent -FilterHashtable @{LogName='System';Level=1,2} -MaxEvents 50 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,ProviderName,@{Name='EventData';Expression={$_.Message}};ServiceEvents=Get-WinEvent -FilterHashtable @{LogName='System';ID=7034,7035,7036,7040} -MaxEvents 30 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}}};ApplicationEvents=@{Errors=Get-WinEvent -FilterHashtable @{LogName='Application';Level=1,2} -MaxEvents 30 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,ProviderName,@{Name='EventData';Expression={$_.Message}}};DefenderEvents=@{ThreatDetections=Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Windows Defender/Operational';ID=1116,1117} -MaxEvents 20 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}};ASRBlocks=Get-WinEvent -FilterHashtable @{LogName='Microsoft-Windows-Windows Defender/Operational';ID=1121,1122} -MaxEvents 20 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,LevelDisplayName,@{Name='EventData';Expression={$_.Message}}};NetworkEvents=@{FirewallBlocks=Get-WinEvent -FilterHashtable @{LogName='Security';ID=5157} -MaxEvents 30 -ErrorAction SilentlyContinue|select-Object TimeCreated,Id,@{Name='EventData';Expression={$_.Message}}}} | ConvertTo-Json -Depth 8 | Out-File -FilePath $eventsFile -Encoding UTF8; Write-CollectionLog "Security event data collected: $eventsFile" }

#===========================================================================
# SCRIPT EXECUTION
#===========================================================================
Clear-Host
Write-Host "=============================================" -ForegroundColor Magenta
Write-Host "==   COMPLIANCE DATA COLLECTION SCRIPT     ==" -ForegroundColor Magenta
Write-Host "=============================================" -ForegroundColor Magenta
Write-Host

Write-Host "Data will be saved to: $script:logFolderPath" -ForegroundColor Yellow
Write-Host

try {
    Export-SystemBaseline
    Export-ComplianceVerification  
    Export-SecurityEventData
    Write-Host "`n[SUCCESS] Compliance data collection completed successfully." -ForegroundColor Green
    Write-CollectionLog "All compliance data collection completed successfully."
} catch {
    Write-Warning "`n[FAILED] A data collection error occurred: $_"
    Write-CollectionLog "[ERROR] Data collection failed: $_"
}

Write-Host
